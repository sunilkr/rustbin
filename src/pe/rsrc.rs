#![allow(non_camel_case_types)]

use std::{io::{ErrorKind, Cursor, Error}, mem::size_of, fmt::Display};

use byteorder::{ReadBytesExt, LittleEndian};
use chrono::{DateTime, Utc};
use serde::Serialize;

use crate::{errors::InvalidTimestamp, new_header_field, types::{Header, HeaderField}, utils::{ContentBase, Reader}, Result};

use super::section::{SectionTable, offset_to_rva, BadOffsetError};


pub const DIR_LENGTH: u64 = 16;
pub const ENTRY_LENGTH: u64 = 8;
pub const DATA_LENGTH: u64 = 16;

#[repr(u8)]
#[derive(Debug, Default, PartialEq, Serialize)]
pub enum ResourceType {
    #[default]
    CURSOR = 1,
    BITMAP = 2,
    ICON = 3,
    MENU = 4,
    DIALOG = 5,
    STRING = 6,
    FONTDIR = 7,
    FONT = 8,
    ACCELERATOR = 9,
    RC_DATA = 10,
    MESSAGE_TABLE = 11,
    GROUP_CURSOR = 12,
    GROUP_ICON = 14,
    VERSION = 16,
    DLG_INCLUDE = 17,
    PLUG_PLAY = 19,
    VXD = 20,
    ANIMATED_CURSOR = 21,
    ANIMATED_ICON = 22,
    HTML = 23,
    MANIFEST = 24,
    UNKNOWN(u32),
}

impl From<u32> for ResourceType {
    fn from(value: u32) -> Self {
        match value {
            01 => Self::CURSOR,
            02 => Self::BITMAP,
            03 => Self::ICON,
            04 => Self::MENU,
            05 => Self::DIALOG,
            06 => Self::STRING,
            07 => Self::FONTDIR,
            08 => Self::FONT,
            09 => Self::ACCELERATOR,
            10 => Self::RC_DATA,
            11 => Self::MESSAGE_TABLE,
            12 => Self::GROUP_CURSOR,
            14 => Self::GROUP_ICON,
            16 => Self::VERSION,
            17 => Self::DLG_INCLUDE,
            19 => Self::PLUG_PLAY,
            20 => Self::VXD,
            21 => Self::ANIMATED_CURSOR,
            22 => Self::ANIMATED_ICON,
            23 => Self::HTML,
            24 => Self::MANIFEST,
            _  => Self::UNKNOWN(value),
        }
    }
}


#[derive(Debug, Default, Serialize)]
pub struct ResourceString {
    pub length: HeaderField<u16>,
    pub value: HeaderField<String>,
}

impl ResourceString {
    pub fn fix_rvas(&mut self, sections: &SectionTable) -> crate::Result<()> {
        self.length.rva = offset_to_rva(sections, self.length.offset as u32)
            .ok_or(BadOffsetError(self.length.offset.into()))?
            .into();
        self.value.rva = offset_to_rva(sections, self.value.offset as u32)
            .ok_or(BadOffsetError(self.value.offset.into()))?
            .into();

        Ok(())
    }
}

impl Header for ResourceString {
    fn parse_bytes(bytes: &[u8], pos: u64) -> crate::Result<Self> where Self: Sized {
        let mut hdr = Self::default();
        let mut reader = ContentBase::new(bytes);
        let mut offset = pos;
        
        let mut cursor = Cursor::new(bytes);
        //cursor.seek(SeekFrom::Start(offset))?;

        hdr.length = new_header_field!(cursor.read_u16::<LittleEndian>()?, offset);
        hdr.value.value = reader.read_wchar_string_at_offset(0)?;
        hdr.value.offset = offset;

        Ok(hdr)
    }

    fn is_valid(&self) -> bool {
        self.length.value > 0 && self.value.value.len() == self.length.value as usize
    }

    fn length() -> usize {
        todo!()
    }
}

impl Display for ResourceString {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.value.value)
    }
}


#[derive(Debug, Default, Serialize)]
pub struct ResourceData {
    pub rva: HeaderField<u32>,
    pub size: HeaderField<u32>,
    pub code_page: HeaderField<u32>,
    reserved: HeaderField<u32>,
    pub value: HeaderField<Vec<u8>>,
}

impl ResourceData {
    fn load_data(&mut self, section_rva: u64, section_offset: u64, section_len: u64, reader: &mut dyn Reader) -> crate::Result<&mut Self> {
        let rv_offset = self.rva.value as i64 - section_rva as i64; //relative virtual offset.
        if rv_offset <= 0 { // must be in resource section?
            return Err(
                Box::new(Error::new(
                    ErrorKind::InvalidData,
                    format!("Offset {:08x} of resource data is byond resource section start {:08x}", self.rva.value, section_offset)
                ))
            )
        }

        let offset = section_offset + rv_offset as u64;
        if offset > section_offset + section_len { // must be in resource section?
            return Err(
                Box::new(Error::new(
                    ErrorKind::InvalidData,
                    format!("Offset {:08x} of resource data is beyond resource section end {:08x}", offset, section_offset + section_len)
                ))
            )
        }

        let data = reader.read_bytes_at_offset(offset, self.size.value as usize)?;
        self.value = HeaderField{value: data, offset: offset, rva: self.rva.value.into()};

        Ok(self)
    }

    pub fn fix_rvas(&mut self, sections: &SectionTable) -> crate::Result<()> {
        self.rva.rva = offset_to_rva(sections, self.rva.offset as u32)
            .ok_or(BadOffsetError(self.rva.offset.into()))?
            .into();

        self.size.rva = offset_to_rva(sections, self.size.offset as u32)
            .ok_or(BadOffsetError(self.size.offset.into()))?
            .into();

        self.code_page.rva = offset_to_rva(sections, self.code_page.offset as u32)
            .ok_or(BadOffsetError(self.code_page.value.into()))?
            .into();

        self.reserved.rva = offset_to_rva(sections, self.reserved.offset as u32)
            .ok_or(BadOffsetError(self.reserved.offset.into()))?
            .into();
        
        Ok(())
    }
}

impl Header for ResourceData {
    fn parse_bytes(bytes: &[u8], pos: u64) -> crate::Result<Self> where Self: Sized {
        let mut offset = pos;
        let mut hdr = Self::default();
        
        let mut cursor = Cursor::new(bytes);
        //cursor.seek(SeekFrom::Start(offset))?;

        hdr.rva = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);
        hdr.size = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);
        hdr.code_page = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);
        hdr.reserved = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);

        Ok(hdr)
    }

    fn is_valid(&self) -> bool {
        self.reserved.value == 0
    }

    fn length() -> usize {
        DATA_LENGTH as usize
    }
}

impl Display for ResourceData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{ RVA: {:08x}, Size: {}, CodePage: {} }}", self.rva.value, self.size.value, self.code_page.value)
    }
}

#[derive(Debug, Serialize)]
pub enum ResourceNode {
    Str(ResourceString),
    Data(ResourceData),
    Dir(ResourceDirectory)
}

impl Default for ResourceNode {
    fn default() -> Self {
        Self::Dir(Default::default())
    }
}


impl ResourceNode {
    pub fn fix_rvas(&mut self, sections: &SectionTable) -> crate::Result<()> {
        match self {
            Self::Data(data) => data.fix_rvas(sections),
            Self::Str(rstr) => rstr.fix_rvas(sections),
            Self::Dir(dir) => dir.fix_rvas(sections),
        }
    }
}

impl Display for ResourceNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self)
    }
}

#[derive(Debug)]
pub enum DataType {
    STRING,
    DATA,
    DIR,
}


#[derive(Debug, Default, Serialize)]
pub struct ResourceEntry {
    pub is_string: bool,
    pub is_data: bool,
    pub id: ResourceType,
    pub name_offset: HeaderField<u32>,
    pub data_offset: HeaderField<u32>,
    pub data: ResourceNode,
}

impl ResourceEntry {
    fn parse_rsrc(&mut self, section_rva: u64, section_offset: u64, section_len: u64, reader: &mut dyn Reader)-> crate::Result<&mut Self> where Self: Sized {
        const OFFSET_MASK: u32 = 0x7fffffff;

        if self.is_data {
            let offset = (self.data_offset.value & OFFSET_MASK) as u64;
            let pos = section_offset + offset;
            let bytes = reader.read_bytes_at_offset(pos, DATA_LENGTH as usize)?;
            let mut data = ResourceData::parse_bytes(&bytes, pos)?;
            data.load_data(section_rva, section_offset, section_len, reader)?;

            self.data = ResourceNode::Data(data);
        }
        else if self.is_string {
            let offset = (self.name_offset.value & OFFSET_MASK) as u64;
            let pos = section_offset + offset;
            let rstr = reader.read_wchar_string_at_offset(pos)?;
            let data = ResourceString { 
                length: HeaderField { value: rstr.len() as u16, offset: pos, rva: pos }, 
                value: HeaderField { value: rstr, offset: pos + 2, rva: pos + 2 }
            };

            self.data = ResourceNode::Str(data);
        }
        else {
            let offset = (self.data_offset.value & OFFSET_MASK) as u64;
            let pos = section_offset + offset;
            let bytes = reader.read_bytes_at_offset(pos, DIR_LENGTH as usize)?;
            let mut data = ResourceDirectory::parse_bytes(&bytes, offset)?;
            data.parse_rsrc(section_rva, section_offset, section_len, reader)?;

            self.data = ResourceNode::Dir(data);
        }

        Ok(self)
    }

    pub fn fix_rvas(&mut self, sections: &SectionTable) -> crate::Result<()> {
        self.name_offset.rva = offset_to_rva(sections, self.name_offset.offset as u32)
            .ok_or(BadOffsetError(self.name_offset.offset.into()))?
            .into();
        
        self.data_offset.rva = offset_to_rva(sections, self.data_offset.offset as u32)
            .ok_or(BadOffsetError(self.data_offset.offset.into()))?
            .into();

        self.data.fix_rvas(sections)?;

        Ok(())
    }
}

impl Header for ResourceEntry {
    fn parse_bytes(bytes: &[u8], pos: u64) -> crate::Result<Self> where Self: Sized {
        let mut hdr = Self::default();
        let mut offset = pos;

        let mut cursor = Cursor::new(bytes);
        //cursor.seek(SeekFrom::Start(offset))?;

        hdr.name_offset = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);
        hdr.data_offset = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);

        if hdr.name_offset.value & 0x80000000 == 0 {
            hdr.is_string = false;
            hdr.id = ResourceType::from(hdr.name_offset.value & 0x7fffffff);
        }
        else {
            hdr.is_string = true;
            hdr.id = ResourceType::from(0);
        }

        hdr.is_data = hdr.data_offset.value & 0x80000000 == 0;
            
        Ok(hdr)
    }

    fn is_valid(&self) -> bool {
        todo!()
    }

    fn length() -> usize {
        ENTRY_LENGTH as usize
    }
}

impl Display for ResourceEntry {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{ IsString: {}, IsData: {}, ID: {:?}, NameOffset: {:08x}, DataOffset: {:08x} }}", self.is_string, self.is_data, self.id, self.name_offset.value, self.data_offset.value)
    }
}


#[derive(Debug, Default, Serialize)]
pub struct ResourceDirectory {
    pub charactristics: HeaderField<u32>,
    pub timestamp: HeaderField<DateTime<Utc>>,
    pub major_version: HeaderField<u16>,
    pub minor_version: HeaderField<u16>,
    pub named_entry_count: HeaderField<u16>,
    pub id_entry_count: HeaderField<u16>,
    pub entries: Vec<ResourceEntry>,
}

impl Display for ResourceDirectory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{ Charactristics: {:#08x}, Timestamp: {:?}, MajorVersion: {}, MinorVersion: {}, NumberOfNamedEntries: {}, NumberOfIdEntries: {} }}",
            self.charactristics.value, self.timestamp.value, self.major_version.value, self.minor_version, self.named_entry_count, self.id_entry_count
        )
    }
}

impl ResourceDirectory {
    pub fn parse_rsrc(&mut self, section_rva: u64, section_offset: u64, section_len: u64, reader: &mut dyn Reader) -> crate::Result<()> {
        let entry_count:u32 = self.named_entry_count.value as u32 + self.id_entry_count.value as u32; 
        for i in 0..entry_count {
            let pos = self.charactristics.offset + DIR_LENGTH + (i * ENTRY_LENGTH as u32) as u64;
            //let offset = section_offset + self.charactristics.offset + DIR_LENGTH + (i + ENTRY_LENGTH as u16) as u64;
            let buf = reader.read_bytes_at_offset(pos, ENTRY_LENGTH as usize)?;
            let mut entry = ResourceEntry::parse_bytes(&buf, pos)?;
            entry.parse_rsrc(section_rva, section_offset, section_len, reader)?;
            self.entries.push(entry);
        }

        Ok(())
    }

    pub fn fix_rvas(&mut self, sections: &SectionTable) -> Result<()> {
        self.charactristics.rva = offset_to_rva(sections, self.charactristics.offset as u32)
            .ok_or(BadOffsetError(self.charactristics.offset.into()))?
            .into();

        self.timestamp.rva = offset_to_rva(sections, self.timestamp.offset as u32)
            .ok_or(BadOffsetError(self.timestamp.offset.into()))?
            .into();

        self.major_version.rva = offset_to_rva(sections, self.major_version.offset as u32)
            .ok_or(BadOffsetError(self.major_version.offset.into()))?
            .into();

        self.minor_version.rva = offset_to_rva(sections, self.minor_version.offset as u32)
            .ok_or(BadOffsetError(self.minor_version.offset.into()))?
            .into();

        self.named_entry_count.rva = offset_to_rva(sections, self.named_entry_count.offset as u32)
            .ok_or(BadOffsetError(self.named_entry_count.offset.into()))?
            .into();

        self.id_entry_count.rva = offset_to_rva(sections, self.id_entry_count.offset as u32)
            .ok_or(BadOffsetError(self.id_entry_count.offset.into()))?
            .into();

        for entry in &mut self.entries {
            entry.fix_rvas(sections)?;
        }

        Ok(())
    }
}

impl Header for ResourceDirectory {
    fn parse_bytes(bytes: &[u8], pos: u64) -> crate::Result<Self> where Self: Sized {
        let bytes_len = bytes.len() as u64;
        let mut offset = pos;

        if bytes_len < DIR_LENGTH {
            return Err ( 
                Box::new(Error::new (
                    ErrorKind::InvalidData, 
                    format!("Not enough data; Expected {DIR_LENGTH}, Found {bytes_len}")
                ))
            );
        }

        let mut hdr = Self::default();
        let mut cursor = Cursor::new(bytes);
        //cursor.seek(SeekFrom::Start(offset))?;

        hdr.charactristics = new_header_field!(cursor.read_u32::<LittleEndian>()?, offset);
        
        let data = cursor.read_u32::<LittleEndian>()?;
        let ts = DateTime::<Utc>::from_timestamp(data.into(), 0).ok_or(InvalidTimestamp{ data: data.into() })?;
        hdr.timestamp = HeaderField {value: ts, offset:offset, rva: offset};
        offset += size_of::<u32>() as u64;

        hdr.major_version = new_header_field!(cursor.read_u16::<LittleEndian>()?, offset);
        hdr.minor_version = new_header_field!(cursor.read_u16::<LittleEndian>()?, offset);
        hdr.named_entry_count = new_header_field!(cursor.read_u16::<LittleEndian>()?, offset);
        hdr.id_entry_count = new_header_field!(cursor.read_u16::<LittleEndian>()?, offset);

        Ok(hdr)
    }

    fn is_valid(&self) -> bool {
        self.charactristics.value == 0 && (self.named_entry_count.value + self.id_entry_count.value) > 0
    }

    fn length() -> usize {
        DIR_LENGTH as usize
    }
}


pub fn print_rsrc_tree(dir: &ResourceDirectory, seperator: &String, level: u8) {
    println!("{} Dir: {}", seperator.repeat(level.into()), dir);

    for entry in &dir.entries {
        println!("{} Entry: {}", seperator.repeat((level + 1).into()), entry);
        let prefix = seperator.repeat((level + 2).into());
        match &entry.data {
            ResourceNode::Str(str) => println!("{prefix} Str: {str}"),
            ResourceNode::Data(data) => println!("{prefix} Data: {data}"),
            ResourceNode::Dir(dir) => print_rsrc_tree(&dir, seperator, level+3)
        }
    }
}


#[cfg(test)]
mod test{
    use std::io::{Cursor, SeekFrom, Seek, Read};

    use crate::{types::Header, pe::{rsrc::{ResourceNode, DATA_LENGTH, ENTRY_LENGTH, ResourceType, print_rsrc_tree}, section::parse_sections}, utils::{ContentBase, Reader}};

    use super::{ResourceDirectory, ResourceData, ResourceEntry, ResourceString};

    #[test]
    fn parse_rsrc_table() {
        let rsrc_tbl_bytes = [
            0x00 as u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
        ];

        let rst = ResourceDirectory::parse_bytes(&rsrc_tbl_bytes, 0).unwrap();

        assert_eq!(rst.charactristics.value, 0);
        assert_eq!(rst.charactristics.offset, 0);
        assert_eq!(rst.timestamp.value.format("%Y-%m-%d %H:%M:%S").to_string(), "1970-01-01 00:00:00");
        assert_eq!(rst.timestamp.offset, 0x04);
        assert_eq!(rst.major_version.value, 0x0004);
        assert_eq!(rst.major_version.offset, 0x08);
        assert_eq!(rst.minor_version.value, 0);
        assert_eq!(rst.minor_version.offset, 0x0a);
        assert_eq!(rst.named_entry_count.value, 0x0000);
        assert_eq!(rst.named_entry_count.offset, 0x0c);
        assert_eq!(rst.id_entry_count.value, 0x000a);
        assert_eq!(rst.id_entry_count.offset, 0x0e);
    }

    #[test]
    fn test_parse_rsrc_string() {
        let bytes = [0x04u8, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00];
        
        let rstr = ResourceString::parse_bytes(&bytes, 0).unwrap();
        
        assert_eq!(rstr.length.value, 4);
        assert_eq!(rstr.length.offset, 0x0);
        assert_eq!(rstr.value.value, "ABCD");
        assert_eq!(rstr.value.offset, 0x2);
    }

    #[test]
    fn test_rstr_fix_rva() {
        let bytes = [0x04u8, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00];
        let sections = parse_sections(&RAW_SECTIONS, 6, 0x1f0).unwrap();
        let mut rstr = ResourceString::parse_bytes(&bytes, 0x00011e02).unwrap();

        rstr.fix_rvas(&sections).unwrap();

        assert_eq!(rstr.length.rva, 0x00018002);
        assert_eq!(rstr.value.rva, 0x00018004);

    }

    #[test]
    fn test_parse_rsrc_data() {
        let pos = 0xb8u64;
        let bytes: &[u8] = &RAW_BYTES[pos as usize.. (pos + DATA_LENGTH) as usize];

        let data = ResourceData::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();
        
        assert_eq!(data.rva.value, 0x000180e8);
        assert_eq!(data.rva.offset, 0x00011eb8);
        assert_eq!(data.size.value, 0x378);
        assert_eq!(data.size.offset, 0x00011ebc);
        assert_eq!(data.code_page.value, 0x4e4);
        assert_eq!(data.code_page.offset, 0x00011ec0);
        assert_eq!(data.reserved.value, 0);
        assert_eq!(data.reserved.offset, 0x00011ec4);
    }

    #[test]
    fn test_load_data() {
        let data_start = [0x01u8, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40];
        let pos = 0xb8u64;
        let bytes: &[u8] = &RAW_BYTES[pos as usize.. (pos + DATA_LENGTH) as usize];
        let mut data = ResourceData::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();

        let mut reader = ContentBase::new(&RAW_BYTES);

        data.load_data(SECTION_VA, 0, SECTION_RAW_SIZE, &mut reader).unwrap();

        assert_eq!(data.value.offset, 0x000000e8);
        assert_eq!(data.value.rva, data.rva.value as u64);
        
        let value16 = &data.value.value[0..16];
        assert_eq!(value16, data_start);
    }

    #[test]
    fn test_rdata_fix_rvas() {
        let pos = 0xb8u64;
        let bytes: &[u8] = &RAW_BYTES[pos as usize.. (pos + DATA_LENGTH) as usize];
        let sections = parse_sections(&RAW_SECTIONS, 6, 0x1f0).unwrap();
        let mut data = ResourceData::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();

        data.fix_rvas(&sections).unwrap();

        assert_eq!(data.rva.rva, 0x000180b8);
        assert_eq!(data.size.rva, 0x000180bc);
        assert_eq!(data.code_page.rva, 0x000180c0);
        assert_eq!(data.reserved.rva, 0x000180c4);
    }

    #[test]
    fn test_parse_rsrc_entry() {
        let pos = 0x10;
        let bytes = &RAW_BYTES[pos as usize..(pos+ENTRY_LENGTH) as usize];

        let entry = ResourceEntry::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();

        assert_eq!(entry.is_string, false);
        assert_eq!(entry.is_data, false);
        assert_eq!(entry.id, ResourceType::DIALOG);
        assert_eq!(entry.data_offset.value, 0x80000028);
        assert_eq!(entry.name_offset.value, 0x00000005);
        assert_eq!(entry.name_offset.offset, 0x00011e10);
        assert_eq!(entry.data_offset.offset, 0x00011e14)
    }

    #[test]
    fn test_parse_rsrc_entry_with_data() {
        let pos = 0x80;
        let bytes = &RAW_BYTES[pos as usize..(pos+ENTRY_LENGTH) as usize];

        let mut entry = ResourceEntry::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();

        assert_eq!(entry.is_string, false);
        assert_eq!(entry.is_data, true);
        assert_eq!(entry.id, ResourceType::UNKNOWN(1033));

        let mut reader = ContentBase::new(&RAW_BYTES);
        entry.parse_rsrc(SECTION_VA, 0, SECTION_RAW_SIZE, &mut reader).unwrap();
        
        if let ResourceNode::Data(data) = entry.data {
            assert_eq!(data.rva.value, 0x000180E8);
            assert_eq!(data.size.value, 0x378);
            assert_eq!(data.code_page.value, 0x4e4);
        }
        else {
            assert!(false, "Unexpected type");
        }
    }

    #[test]
    fn test_rsrc_entry_fix_rvas() {
        let pos = 0x80;
        let bytes = &RAW_BYTES[pos as usize..(pos+ENTRY_LENGTH) as usize];
        let sections = parse_sections(&RAW_SECTIONS, 6, 0x1f0).unwrap();
        let mut reader = RsrcOnlyReader::new(&RAW_BYTES);

        let mut entry = ResourceEntry::parse_bytes(bytes, SECTION_OFFSET + pos).unwrap();
        entry.parse_rsrc(SECTION_VA, SECTION_OFFSET, SECTION_RAW_SIZE, &mut reader).unwrap();
        
        entry.fix_rvas(&sections).unwrap();

        assert_eq!(entry.name_offset.rva, 0x00018080);
        assert_eq!(entry.data_offset.rva, 0x00018084);

        if let ResourceNode::Data(data) = &entry.data {
            assert_eq!(data.rva.rva, 0x000180b8);
            assert_eq!(data.size.rva, 0x000180bc);
            assert_eq!(data.code_page.rva, 0x000180c0);
            assert_eq!(data.reserved.rva, 0x000180c4);
        }
    }

    #[test]
    fn test_parse_rsrc_tree() {
        let mut reader = ContentBase::new(&RAW_BYTES);
        let mut rsrc_tbl = ResourceDirectory::parse_bytes(&RAW_BYTES, 0).unwrap();
        assert_eq!(rsrc_tbl.id_entry_count.value, 3);

        rsrc_tbl.parse_rsrc(SECTION_VA, 0, SECTION_RAW_SIZE, &mut reader).unwrap();
        assert_eq!(rsrc_tbl.entries.len(), 3);

        //1st tree
        let e1 = &rsrc_tbl.entries[0];
        assert_eq!(e1.id, ResourceType::DIALOG);
        if let ResourceNode::Dir(dir) = &e1.data {
            assert_eq!(dir.id_entry_count.value, 1);
            assert_eq!(dir.entries.len(), 1);
            let e = &dir.entries[0];
            assert_eq!(e.id, ResourceType::UNKNOWN(101));
            if let ResourceNode::Dir(dir) = &e.data {
                assert_eq!(dir.id_entry_count.value, 1);
                assert_eq!(dir.entries.len(), 1);
                let e = &dir.entries[0];
                assert_eq!(e.id, ResourceType::UNKNOWN(1033));
                if let ResourceNode::Data(data) = &e.data {
                    assert_eq!(data.value.value.len(), data.size.value as usize);
                    let data_start = [0x01u8, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40];
                    let value16 = &data.value.value[0..16];
                    assert_eq!(value16, data_start);
                }
                else {
                    assert!(false, "Unexpected type at L12. DATA was expected; Found: {:?}", &e.data);
                }
            }
            else {
                assert!(false, "Unexpected type at L11. DIR was expected; Found: {:?}", &e.data);
            }
        }
        else {
            assert!(false, "Unexpected type at L1. DIR was expected; Found: {:?}", &e1.data);
        }

        //2nd tree
        let e2 = &rsrc_tbl.entries[1];
        assert_eq!(e2.id, ResourceType::VERSION);
        if let ResourceNode::Dir(dir) = &e2.data {
            assert_eq!(dir.id_entry_count.value, 1);
            assert_eq!(dir.entries.len(), 1);
            let e = &dir.entries[0];
            assert_eq!(e.id, ResourceType::CURSOR);
            if let ResourceNode::Dir(dir) = &e.data {
                assert_eq!(dir.id_entry_count.value, 1);
                assert_eq!(dir.entries.len(), 1);
                let e = &dir.entries[0];
                assert_eq!(e.id, ResourceType::UNKNOWN(1033));
                if let ResourceNode::Data(data) = &e.data {
                    assert_eq!(data.value.value.len(), data.size.value as usize);
                    let data_start = [0x80, 0x03, 0x34, 0x00, 0x00, 0x00, 0x56, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x56, 0x00, 0x45, 0x00];
                    let value16 = &data.value.value[0..16];
                    assert_eq!(value16, data_start);
                }
                else {
                    assert!(false, "Unexpected type at L22. DATA was expected; Found: {:?}", &e.data);
                }
            }
            else {
                assert!(false, "Unexpected type at L21. DIR was expected; Found: {:?}", &e.data);
            }
        }
        else {
            assert!(false, "Unexpected type at L2. DIR was expected; Found: {:?}", &e2.data);
        }

        //3rd tree
        let e3 = &rsrc_tbl.entries[2];
        assert_eq!(e3.id, ResourceType::MANIFEST);
        if let ResourceNode::Dir(dir) = &e3.data {
            assert_eq!(dir.id_entry_count.value, 1);
            assert_eq!(dir.entries.len(), 1);
            let e = &dir.entries[0];
            assert_eq!(e.id, ResourceType::BITMAP);
            if let ResourceNode::Dir(dir) = &e.data {
                assert_eq!(dir.id_entry_count.value, 1);
                assert_eq!(dir.entries.len(), 1);
                let e = &dir.entries[0];
                assert_eq!(e.id, ResourceType::UNKNOWN(1033));
                if let ResourceNode::Data(data) = &e.data {
                    assert_eq!(data.value.value.len(), data.size.value as usize);
                    let data_start = [0x3C, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D];
                    let value16 = &data.value.value[0..16];
                    assert_eq!(value16, data_start);
                }
                else {
                    assert!(false, "Unexpected type at L32. DATA was expected; Found: {:?}", &e.data);
                }
            }
            else {
                assert!(false, "Unexpected type at L31. DIR was expected; Found: {:?}", &e.data);
            }
        }
        else {
            assert!(false, "Unexpected type at L3. DIR was expected; Found: {:?}", &e2.data);
        }

    }

    #[test]
    fn test_print_tree() {
        let mut reader = ContentBase::new(&RAW_BYTES);
        let mut rsrc_tbl = ResourceDirectory::parse_bytes(&RAW_BYTES, 0).unwrap();
        assert_eq!(rsrc_tbl.id_entry_count.value, 3);

        rsrc_tbl.parse_rsrc(SECTION_VA, 0, SECTION_RAW_SIZE, &mut reader).unwrap();
        assert_eq!(rsrc_tbl.entries.len(), 3);

        print_rsrc_tree(&rsrc_tbl, &" ".to_string(), 0);
    }

    const SECTION_VA: u64 = 0x00018000;
    const SECTION_OFFSET: u64 = 0x00011E00;
    const SECTION_RAW_SIZE: u64 = 0x00000a00;

    struct RsrcOnlyReader<'a> {
        cursor: Cursor<&'a [u8]>,
        delta: u64,
    }

    impl<'a> RsrcOnlyReader<'a> {
        pub fn new(buf: &'a[u8]) -> Self {
            let cursor = Cursor::new(buf);
            Self { cursor: cursor, delta: SECTION_OFFSET }
        }
    }
    
    impl Reader for RsrcOnlyReader<'_> {
        fn read_bytes_at_offset(&mut self, offset: u64, size: usize) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
            let mut buf:Vec<u8> = vec![0; size];
            let pos = offset - self.delta;
            self.cursor.seek(SeekFrom::Start(pos))?;
            self.cursor.read_exact(&mut buf)?;
            Ok(buf)
        }
    }

    const RAW_BYTES: [u8; 0xa00] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80,
        0x18, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x65, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x09, 0x04, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x04, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x09, 0x04, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0xE8, 0x80, 0x01, 0x00, 0x78, 0x03, 0x00, 0x00,
        0xE4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x84, 0x01, 0x00, 0x80, 0x03, 0x00, 0x00,
        0xE4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x87, 0x01, 0x00, 0x5A, 0x01, 0x00, 0x00,
        0xE4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x01,
        0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x90, 0x01, 0x00, 0x01, 0x4D, 0x00,
        0x53, 0x00, 0x20, 0x00, 0x53, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00,
        0x44, 0x00, 0x6C, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x50, 0x07, 0x00, 0x03, 0x00, 0x3E, 0x01, 0x18, 0x00, 0xF8, 0x03, 0x00, 0x00,
        0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x01, 0x50, 0x11, 0x00, 0x0C, 0x00, 0xB1, 0x00, 0x0A, 0x00, 0xEB, 0x03, 0x00, 0x00,
        0xFF, 0xFF, 0x80, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00,
        0x69, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00,
        0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
        0x45, 0x00, 0x78, 0x00, 0x65, 0x00, 0x63, 0x00, 0x75, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00,
        0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6C, 0x00,
        0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x79, 0x00, 0x20, 0x00, 0x70, 0x00, 0x61, 0x00,
        0x63, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x50, 0x07, 0x00, 0x22, 0x00, 0x3D, 0x01, 0xC9, 0x00,
        0xF9, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50,
        0x10, 0x00, 0x2E, 0x00, 0x55, 0x00, 0x0A, 0x00, 0xEC, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00,
        0x50, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00,
        0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00,
        0x63, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50, 0x10, 0x00, 0x3C, 0x00,
        0x5E, 0x00, 0x0A, 0x00, 0xED, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x50, 0x00, 0x61, 0x00,
        0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x75, 0x00,
        0x72, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00,
        0x63, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x21, 0x50, 0x17, 0x00, 0x4B, 0x00,
        0x90, 0x00, 0x1E, 0x00, 0xEE, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50, 0x10, 0x00, 0x5E, 0x00,
        0x61, 0x00, 0x0A, 0x00, 0xEF, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x53, 0x00, 0x74, 0x00,
        0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00,
        0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x44, 0x00,
        0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50,
        0xB5, 0x00, 0x40, 0x00, 0x22, 0x00, 0x0A, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00,
        0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x63, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50, 0xEB, 0x00, 0x40, 0x00,
        0x35, 0x00, 0x0A, 0x00, 0xF1, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x41, 0x00, 0x6C, 0x00,
        0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x64, 0x00,
        0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x01, 0x50, 0xEB, 0x00, 0x4E, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0xF2, 0x03, 0x00, 0x00,
        0xFF, 0xFF, 0x80, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00,
        0x6C, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0xB5, 0x00, 0x5F, 0x00,
        0x32, 0x00, 0x0E, 0x00, 0xF3, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x50, 0x00, 0x61, 0x00,
        0x63, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x50, 0xF2, 0x00, 0x5F, 0x00, 0x32, 0x00, 0x0E, 0x00, 0xF4, 0x03, 0x00, 0x00,
        0xFF, 0xFF, 0x80, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x21, 0x50,
        0xB5, 0x00, 0x2D, 0x00, 0x7F, 0x00, 0x1E, 0x00, 0xF6, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x85, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x50,
        0xB5, 0x00, 0x4E, 0x00, 0x22, 0x00, 0x0A, 0x00, 0xF7, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00,
        0x45, 0x00, 0x78, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x18, 0xA1, 0x50, 0x0D, 0x00, 0x70, 0x00,
        0x32, 0x01, 0x76, 0x00, 0xFA, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x03, 0x34, 0x00, 0x00, 0x00, 0x56, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x56, 0x00, 0x45, 0x00,
        0x52, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4F, 0x00, 0x4E, 0x00, 0x5F, 0x00, 0x49, 0x00, 0x4E, 0x00,
        0x46, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x04, 0xEF, 0xFE, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x02, 0x00, 0x00,
        0x01, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x46, 0x00,
        0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00,
        0xBA, 0x02, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x34, 0x00, 0x30, 0x00, 0x39, 0x00, 0x30, 0x00,
        0x34, 0x00, 0x62, 0x00, 0x30, 0x00, 0x00, 0x00, 0x62, 0x00, 0x25, 0x00, 0x01, 0x00, 0x43, 0x00,
        0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x00, 0x00,
        0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x20, 0x00, 0x55, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6C, 0x00,
        0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x2D, 0x00, 0x20, 0x00, 0x43, 0x00, 0x46, 0x00,
        0x46, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00,
        0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6E, 0x00,
        0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00,
        0x01, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x79, 0x00,
        0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x61, 0x00,
        0x6E, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x73, 0x00,
        0x74, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x00, 0x00, 0x72, 0x00, 0x25, 0x00,
        0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00,
        0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x20, 0x00, 0x55, 0x00, 0x74, 0x00,
        0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x2D, 0x00, 0x20, 0x00,
        0x43, 0x00, 0x46, 0x00, 0x46, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6C, 0x00,
        0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00,
        0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x36, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x56, 0x00,
        0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x31, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x30, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x30, 0x00, 0x2C, 0x00,
        0x20, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x04, 0x00, 0x01, 0x00, 0x49, 0x00,
        0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x4E, 0x00,
        0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x00, 0x00,
        0x80, 0x00, 0x2E, 0x00, 0x01, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6C, 0x00,
        0x43, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00,
        0x74, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x36, 0x00,
        0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x20, 0x00,
        0x50, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x69, 0x00,
        0x2E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x72, 0x00,
        0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x72, 0x00, 0x65, 0x00,
        0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x00, 0x00,
        0x38, 0x00, 0x08, 0x00, 0x01, 0x00, 0x4F, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x69, 0x00,
        0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x6E, 0x00,
        0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x2E, 0x00,
        0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x38, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x50, 0x00,
        0x72, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x4E, 0x00, 0x61, 0x00,
        0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x50, 0x00, 0x58, 0x00, 0x20, 0x00,
        0x55, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x00, 0x00,
        0x3A, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00,
        0x63, 0x00, 0x74, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00,
        0x6E, 0x00, 0x00, 0x00, 0x31, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x30, 0x00, 0x2C, 0x00, 0x20, 0x00,
        0x30, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x56, 0x00, 0x61, 0x00, 0x72, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00,
        0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x6C, 0x00, 0x61, 0x00,
        0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x04, 0xB0, 0x04,
        0x3C, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D,
        0x22, 0x75, 0x72, 0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69, 0x63,
        0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A, 0x61, 0x73, 0x6D, 0x2E, 0x76,
        0x31, 0x22, 0x20, 0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
        0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x3C, 0x74, 0x72,
        0x75, 0x73, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x75,
        0x72, 0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69, 0x63, 0x72, 0x6F,
        0x73, 0x6F, 0x66, 0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A, 0x61, 0x73, 0x6D, 0x2E, 0x76, 0x33, 0x22,
        0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
        0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x73, 0x3E, 0x0D, 0x0A,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
        0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x4C, 0x65, 0x76, 0x65, 0x6C,
        0x20, 0x6C, 0x65, 0x76, 0x65, 0x6C, 0x3D, 0x22, 0x61, 0x73, 0x49, 0x6E, 0x76, 0x6F, 0x6B, 0x65,
        0x72, 0x22, 0x20, 0x75, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3D, 0x22, 0x66, 0x61, 0x6C,
        0x73, 0x65, 0x22, 0x3E, 0x3C, 0x2F, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45,
        0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3E, 0x0D, 0x0A,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x2F, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
        0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x73, 0x3E, 0x0D, 0x0A, 0x20, 0x20,
        0x20, 0x20, 0x3C, 0x2F, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3E, 0x0D, 0x0A, 0x20,
        0x20, 0x3C, 0x2F, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x3E, 0x0D, 0x0A, 0x3C,
        0x2F, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x3E, 0x50, 0x41, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44,
        0x49, 0x4E, 0x47, 0x58, 0x58, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4E, 0x47, 0x50, 0x41, 0x44, 0x44
    ];

    const RAW_SECTIONS: [u8; 240] = [
        0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x85, 0xB9, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
        0x00, 0xBA, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
        0x76, 0x3F, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
        0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00,
        0x00, 0x16, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
        0x30, 0x09, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
        0x2E, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00, 0x3C, 0x09, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00,
        0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00,
        0xBC, 0x03, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42
    ];
}
